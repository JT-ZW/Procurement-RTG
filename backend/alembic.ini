# A generic, single database configuration.

[alembic]
# path to migration scripts
script_location = alembic

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# sys.path path, will be prepended to sys.path if present.
# defaults to the current working directory.
prepend_sys_path = .

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that can be
# installed by adding `alembic[tz]` to the pip requirements
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version number format; This defaults to %%(rev)s for the filename
# This is useful when you want to order your migration files
# chronologically, as it allows the ordering of the files to
# be maintained. Valid values include:
#
# %%(rev)s - revision id
# %%(slug)s - the slug created from the revision message
# %%(year)d, %%(month).2d, %%(day).2d, %%(hour).2d,
# %%(minute).2d, %%(second).2d - components of the timestamp
# version_num_format = %%(rev)s

# version path separator; As mentioned above, this is the character used to split
# version_path_pattern into a list
# version_path_separator = :

# the file extension to use with the "version" path,
# defaults to .py
# version_suffix = .py

# set to 'true' to search source files recursively
# in each "version_locations" directory
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

# Logging configuration
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# Database configuration
# You can set the database URL directly here or use environment variables
# For production, it's recommended to use environment variables

# Option 1: Direct database URL (for development)
# Replace with your actual database credentials
# sqlalchemy.url = postgresql://username:password@localhost:5432/procurement_db

# Option 2: Using environment variable (recommended for production)
# Set DATABASE_URL in your environment
# sqlalchemy.url = driver://user:pass@localhost/dbname

# For now, we'll use a placeholder that you should replace
sqlalchemy.url = postgresql://user:password@localhost:5432/procurement_db


# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# post_write_hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME

# Uncomment to format using "black" if you have it installed
# post_write_hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 88 REVISION_SCRIPT_FILENAME
